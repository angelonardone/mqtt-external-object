name: Build

on:
  push:
    branches: [ master ]


jobs:
  build:
    runs-on: windows-2019

    env:
      Configuration: Release
      Project: MQTTLib
      Solution: .\src\MQTTLib\MQTTLib.csproj
      Bin: MQTTLib.dll

    steps:
    - uses: actions/checkout@v2
    
    # setup MSBuild
    - name: setup-msbuild
      uses: microsoft/setup-msbuild@v1

    - name: Setup NuGet.exe
      uses: nuget/setup-nuget@v1
    
    # Runs a multiple command using the runners shell
    - name: Restore Nuget
      run: Nuget restore ${env:Solution}

    # Runs a multiple command using the runners shell
    - name: Build Solution
      run: msbuild ${env:Solution} /p:Configuration=${env:Configuration}

    - name: Set the version environment variable
      run: |
        $file = ".\src\MQTTLib\bin\${env:Configuration}\${env:Bin}"
        $env:WINS_VERSION = $(Get-Item $file).VersionInfo.ProductVersion
        Write-Host WINS_VERSION $env:WINS_VERSION
        echo "::set-env name=WINS_VERSION::$env:WINS_VERSION"
        $env:TIMESTAMP = Get-Date -Format "yyyyMMddHHmmss"
        Write-Host TIMESTAMP $env:TIMESTAMP
        echo "::set-env name=TIMESTAMP::$env:TIMESTAMP"
    - name: Deploy & zip
      run: |
        New-Item bin -ItemType Directory
        
        Copy-Item .\src\MQTTLib\bin\${env:Configuration}\MQTTLib.dll .\bin
        Copy-Item .\src\MQTTLib\bin\${env:Configuration}\MQTTnet.dll .\bin
        Copy-Item .\src\MQTTLib\bin\${env:Configuration}\BouncyCastle.Crypto.dll .\bin
        
        Compress-Archive -Path .\bin\*.* -DestinationPath ${{ env.Project }}.zip
        
    - name: Create a Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.TIMESTAMP }}
        release_name: Release ${{ env.TIMESTAMP }} (${{ env.Project }} ${{ env.WINS_VERSION }})

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.Project }}.zip
        asset_name: ${{ env.Project }}.zip
        asset_content_type: application/zip
